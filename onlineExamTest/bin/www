#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('onlineTest:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var dbHelper = require('../db/dbHelper');
var onlineList = [];
var teacherId=0;
var user = {};
var io = require('socket.io').listen(server);
io.on('connection', function (socket) {
    socket.on('online',function(data){
        user=data;
         user[data._id] = socket;
        if(user.type===0){
            if(onlineList.indexOf(user._id)===-1){
                onlineList.push(user._id);
                    if(teacherId !== 0){
                          user[teacherId].emit("reload",user._id);
                    }
            }
        }
    })
    socket.on('online',function(data){
        var student={
            userId:data._id,
            status:1
        }
        dbHelper.updateStatus(student, function (success, doc) {});
        io.emit("reload",data._id);
    })
    socket.on('offline',function(data){
         var student={
             userId:data,
             status:0
         }
         dbHelper.updateStatus(student, function (success, doc) {});
         io.emit("reload",data._id);
    })
     socket.on('start exam',function () {
            io.emit('start exam');
        })
      socket.on('update status',function () {
                  io.emit('reload');
              })
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
